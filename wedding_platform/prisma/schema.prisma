// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  role      String   @default("customer") // customer, vendor, admin
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings  Booking[]
  reviews   Review[]

  @@map("users")
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  icon        String?
  createdAt   DateTime @default(now())

  // Relations
  vendors     Vendor[]

  @@map("categories")
}

model Location {
  id        String @id @default(cuid())
  city      String
  state     String?
  country   String @default("India")
  createdAt DateTime @default(now())

  // Relations
  vendors   Vendor[]

  @@map("locations")
}

model Vendor {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  email       String @unique
  phone       String
  whatsapp    String?
  description String?
  experience  String?
  eventsDone  Int @default(0)
  rating      Float @default(0)
  reviewCount Int @default(0)

  // Relations
  categoryId String
  locationId String
  category   Category @relation(fields: [categoryId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  // Vendor details
  services     Service[]
  packages     Package[]
  portfolio    PortfolioItem[]
  reviews      Review[]
  bookings     Booking[]
  contactInquiries ContactInquiry[]

  // Additional info
  image        String?
  website      String?
  paymentPolicy String?
  additionalInfo String?

  // Status
  isVerified Boolean @default(false)
  isActive   Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("vendors")
}

model Service {
  id          String @id @default(cuid())
  name        String
  description String?
  price       String
  vendorId    String

  vendor      Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("services")
}

model Package {
  id          String @id @default(cuid())
  name        String
  description String?
  price       String
  features    String?
  vendorId    String

  vendor      Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("packages")
}

model PortfolioItem {
  id          String @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  vendorId    String

  vendor      Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("portfolio_items")
}

model Review {
  id        String @id @default(cuid())
  rating    Int
  comment   String?
  customerName String
  service   String?

  // Relations
  userId    String?
  vendorId  String
  user      User? @relation(fields: [userId], references: [id])
  vendor    Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("reviews")
}

model Booking {
  id          String @id @default(cuid())
  customerName String
  customerEmail String
  customerPhone String
  eventDate   DateTime
  service     String
  status      String @default("pending") // pending, confirmed, completed, cancelled
  notes       String?

  // Relations
  userId      String?
  vendorId    String
  user        User? @relation(fields: [userId], references: [id])
  vendor      Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  // Pricing
  price       String?
  paymentStatus String @default("pending") // pending, paid, refunded

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("bookings")
}

model ContactInquiry {
  id           String @id @default(cuid())
  name         String
  phone        String
  vendorId     String?
  vendorName   String
  vendorSlug   String
  inquiryType  String @default("general") // general, booking, inquiry
  status       String @default("new") // new, contacted, closed
  notes        String?

  // Relations
  vendor       Vendor? @relation(fields: [vendorId], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("contact_inquiries")
}
